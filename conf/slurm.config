// Pipeline parameters
params {
    max_cpus = 32
    max_mem = 120.Gb
    max_time = 72.h
    conda_env_path = false
}

// Process parameters
process {
  
  executor = 'slurm'
  queue = { params.submission_queue }
  cpus = { check_resources( params.threads * task.attempt, params.max_cpus) }
  memory = { check_resources( 4.Gb * task.attempt, params.max_mem) }
  time = { check_resources(1.h * task.attempt, params.max_time) }
  clusterOptions = { "--mail-user=${params.email} --mail-type=FAIL" }

  // Error strategy for failing tasks
  errorStrategy = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
  maxRetries = 3
  maxErrors = '-1' // Turn off maxErrors

  conda = 'fastp fastqc stacks=2.52 bwa samtools bcftools blast hmmer trinity transdecoder cd-hit bwa-mem2 gatk4'

  // conda = workflow.projectDir + '/environment.yaml' // What I want...

  // Change from withLabel once new version solves withName problem
  withLabel:fixCore {
      cpus = 4
  }

  withLabel:stacks {
    time = { check_resources(6.h * task.attempt, params.max_time) }
    cpus = params.threads
    memory = { check_resources( 8.Gb * task.attempt, params.max_mem) }
  }

  withLabel:codeml {
    time = { check_resources(8.h * task.attempt, params.max_time) }
    cpus = params.threads
    memory = { check_resources( 8.Gb * task.attempt, params.max_mem) }

    if(params.conda_env_path) {
      conda = params.conda_env_path
    }
  }

  withLabel:index {
    cpus = 1
    time = { check_resources(2.h * task.attempt, params.max_time) }
  }

  withLabel:bwa {
    time = { check_resources(12.h * task.attempt, params.max_time) }
    cpus = params.threads
    memory = { check_resources( 8.Gb * task.attempt, params.max_mem) }
  }

  withLabel:consensus {
    cpus = 1
    time = { check_resources(6.h * task.attempt, params.max_time) }
  }

  withLabel:trin {
    time = { check_resources(24.h * task.attempt, params.max_time) }
    cpus = params.threads
    memory = { check_resources( 50.Gb * task.attempt, params.max_mem) }
  }

  withLabel:homology {
    time = { check_resources(2.h * task.attempt, params.max_time) }
    cpus = params.threads
    memory = { check_resources( 8.Gb * task.attempt, params.max_mem) }
  }

  withLabel:transd {
    time = { check_resources(24.h * task.attempt, params.max_time) }
    cpus = 1
    memory = { check_resources( 4.Gb * task.attempt, params.max_mem) }
  }

  withLabel:varCall {
    time = { check_resources(24.h * task.attempt, params.max_time) }
    cpus = params.threads
    memory = { check_resources( 8.Gb * task.attempt, params.max_mem) }
  }
}

conda {
  cacheDir = "${FASTDIR}/nf-conda_envs"
}

// Local machine parameters
executor {
  name = 'slurm'
  jobname = { "$task.name - $task.hash"}
  queueSize = 10000 // Max for any individual user
  submitRateLimit = '10 sec'
  queueSize = params.sub_workflows.contains('transcript_pipeline') == true ? 2 : 200
}
