/*
================================================================================
                  Configuration file for Gene fusion pipeline
--------------------------------------------------------------------------------
Contains the default configuration options for all profiles (environments).
Profile specific parameters are to be saved in the `conf` directory and
imported within the profile here.
================================================================================
*/

// General information about the overall pipeline
// manifest {
//   author = 'Alastair Ludington'
//   description = 'QC pipeline: Sequence data'
//   homePage = '...'
//   mainScript = 'main.nf'
//   name = 'QC pipeline'
//   nextflowVersion = '>=0.32.0'
//   version = '1.0'
// }

// Improved shell functionality:
// -e: Exit immediately when command fails
// -u: Exit if variable is unset
// -o pipefail: prevents piping from causing a non-zero exit status
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Pipeline profiles w/ dependencies
profiles {
    standard {
        includeConfig 'conf/local.config'
    }
    slurm {
        includeConfig 'conf/slurm.config'
    }
}

// Check requested resources
def check_resources(val, max, queue){

    if(queue == 'test') {
        if( val instanceof Integer ) {return 2 as int }
        if( val instanceof nextflow.util.MemoryUnit) {return 4 as nextflow.util.MemoryUnit}
        if(val instanceof nextflow.util.Duration) { return 1 as nextflow.util.Duration}
    } else {
        // Check CPU value doesn't exceed the node limit 
        if( val instanceof Integer ) {
            try {
                return Math.min( val, max as int)
            }
            catch( all ) {
                println "WARNING: Max cpus '${max}' is not valid. Using default value: ${val}   "
                return val
            }
        }
        // Check the memory value does exceed the memory limit
        if(val instanceof nextflow.util.MemoryUnit){
            try{
                def other = max as nextflow.util.MemoryUnit
                return val.compareTo(other) == 1 ? other : val
            }
            catch(all){
                println "WARNING: Max memory '${max}' is not valid. Using default value $   {val}"
                return val
            }
        }
        // Check that the time duration does not exceed walltime limits
        if( val instanceof nextflow.util.Duration ) {
            try {
                def other = max as nextflow.util.Duration
                return val.compareTo(other) == 1 ? other : val
            }   
            catch( all ) {
                println "WARNING: Max time '${max}' is not valid. Using default value: ${val}   "
                return val
            }  
        }
    }    
}